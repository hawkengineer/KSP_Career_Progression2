//------------------------------------------------------------------------------------------------------------------------

CONTRACT_TYPE
{
	name				= SED_SolarScienceHigh
	sortKey				= 180
	group				= Science Exploration Division
	agent				= Science Exploration Division
	title				= #SED_SolarScienceHigh_1
	synopsis			= #SED_SolarScienceHigh_2
	completedMessage	= #SED_SolarScienceHigh_4
	description			= #SED_SolarScienceHigh_6
	minExpiry			= 5.0
	maxExpiry			= 100.0
	deadline			= 0
	cancellable			= false
	declinable			= false
	autoAccept 			= false
	maxCompletions		= 0
	maxSimultaneous		= 1
	//
	targetBody			=  @/targetBodyValid1
	//
	// Contract Reweards
	prestige			= Trivial										// Possible values are: Trivial , Significant , Exceptional 
	rewardScience		= @KSP_Career_Progression2:rewardScience * 0.1
	rewardReputation	= @KSP_Career_Progression2:rewardRep * 0.2	
	rewardFunds			= @KSP_Career_Progression2:baseComp * 0.5
	advanceFunds		= @KSP_Career_Progression2:baseAdv * 0.4
	//
	// DATA Contract Configuration --------------------------------------------------------------------------------------------

	DATA
	{
		type				= CelestialBody
		requiredValue		= true
		targetBodyValid1	= HomeWorld().Parent()
	}	
	DATA
	{
		type = double
		SpaceThreshold = @/targetBody.SpaceAltitudeThreshold()
		AtmLimit = @/targetBody.AtmosphereAltitude()
		title = #SED_SolarScienceHigh_MSG1
	}		
 	// Science recovery: transmit, recover, or ideal.
    DATA
    {
		type = ScienceRecoveryMethod
        hidden = true
        recoveryMethod = Ideal
    }
	DATA
	{
		type			= int
		requiredValue 	= false
		numMoons		= @KSP_Career_Progression2:homeMoons.Count()
		numMoonsOrbit	= @KSP_Career_Progression2:orbitedMoons.Count()

	}
	DATA
	{
		type			= List<ScienceExperiment>
		hidden			= true
		experiment1		= AvailableExperiments(@/targetBody)
	}		
	DATA
	{
		//[ SrfLanded, SrfSplashed, FlyingLow, FlyingHigh, InSpaceLow, InSpaceHigh ]
		//
		type			= List<ScienceSubject>
        hidden = true
		//
		scienceList1	= AllScienceSubjectsByBodyExperiment([@targetBody], @experiment1)
		scienceList2	= @scienceList1.Where(sc => sc.Situation() == InSpaceHigh )
		scienceList3	= @scienceList2.Where(sc => sc.RemainingScience() / sc.TotalScience() >= 0.1 )										// Find where 10% remains
		scienceList4	= @scienceList3.Random(5)		
	}

	
	// Contract Requirements --------------------------------------------------------------------------------------------------

	REQUIREMENT
	{
		name = Expression
		type = Expression
		checkOnActiveContract = false
		expression = @/numMoons == @/numMoonsOrbit
		title = #SED_SolarScienceHigh_MSG1
	}
	REQUIREMENT
	{
		type = Expression
		title = #SED_SolarScienceHigh_MSG3
		expression = @/scienceList4.Count() >= 1
	}
	// Contract Behaviors -----------------------------------------------------------------------------------------------------

	
	// Contract Parameters ----------------------------------------------------------------------------------------------------
	
	// Objective #1: Send a mission to collect the identified science measurements
	PARAMETER
	{
		name 	= SolarScienceHigh
		type	= VesselParameterGroup
		title 	= #SED_SolarScienceHigh_7
		completedMessage = #SED_SolarScienceHigh_8
		rewardFunds = @/KSP_Career_Progression2:baseComp * 0.1
		//
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
		}
		PARAMETER
        {
            name 		= SunOrbit
            type 		= ReachState
			situation 	= ORBITING
			minAltitude	= @/SpaceThreshold
            title = #SED_SolarScienceHigh_MSG4
		}
		PARAMETER
		{
			name 				= CollectSurfaceScience
			type 				= CollectScience
			subject 			= @sunScienceID
			recoveryMethod 		= Ideal
			rewardFunds 		= @KSP_Career_Progression2:baseComp * 0.1
			completedMessage 	= #SED_SolarScienceHigh_9
			title 				= #SED_SolarScienceHigh_10
			ITERATOR
			{
				type = ScienceSubject
				sunScienceID = @/scienceList4
				REQUIREMENT
				{
					type = Expression
					expression = @../scienceList4.Count() > 0
				}
			}

		}


	}


}
		
	
	
	
	
